
import React, { useMemo } from 'react';
import { LightbulbIcon, BookTextIcon, SparklesIcon, MessagesSquareIcon, ChevronDownIcon, ChevronUpIcon } from 'lucide-react';
import { Button } from '@/components/ui/button';
import { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/tabs';
import { Collapsible, CollapsibleContent, CollapsibleTrigger } from '@/components/ui/collapsible';

interface QuickPromptsProps {
  onSelectPrompt: (prompt: string) => void;
}

const QuickPrompts: React.FC<QuickPromptsProps> = React.memo(({ onSelectPrompt }) => {
  
  // Memoize the prompt arrays to prevent unnecessary recreations
  const generalPrompts = useMemo(() => [
    "Gi·∫£i th√≠ch X nh∆∞ th·ªÉ t√¥i 5 tu·ªïi",
    "Vi·∫øt m·ªôt email chuy√™n nghi·ªáp v·ªÅ",
    "T√≥m t·∫Øt vƒÉn b·∫£n n√†y",
    "ƒê·ªÅ xu·∫•t √Ω t∆∞·ªüng cho",
    "Ph√¢n t√≠ch d·ªØ li·ªáu n√†y",
    "T·∫°o k·∫ø ho·∫°ch cho",
    "So s√°nh A v√† B"
  ], []);
  
  const creativePrompts = useMemo(() => [
    "Vi·∫øt m·ªôt b√†i th∆° ng·∫Øn v·ªÅ",
    "K·ªÉ m·ªôt c√¢u chuy·ªán v·ªÅ",
    "T·∫°o m·ªôt tr√≤ ch∆°i v·ªõi ch·ªß ƒë·ªÅ",
    "Thi·∫øt k·∫ø m·ªôt nh√¢n v·∫≠t cho",
    "Vi·∫øt m·ªôt k·ªãch b·∫£n h·ªôi tho·∫°i v·ªÅ"
  ], []);
  
  const professionalPrompts = useMemo(() => [
    "T·∫°o b·∫£n t√≥m t·∫Øt b√°o c√°o v·ªÅ",
    "Ph√¢n t√≠ch SWOT cho",
    "Vi·∫øt m√¥ t·∫£ s·∫£n ph·∫©m cho",
    "T·∫°o k·∫ø ho·∫°ch ti·∫øp th·ªã cho",
    "So·∫°n b√†i thuy·∫øt tr√¨nh v·ªÅ"
  ], []);
  
  // Memoize the rendering of prompt buttons to prevent unnecessary re-renders
  const renderPromptButtons = useMemo(() => (
    prompts: string[]
  ) => (
    <div className="flex flex-wrap gap-2">
      {prompts.map((prompt, index) => (
        <Button
          key={index}
          variant="outline"
          size="sm"
          className="text-xs bg-background/50 hover:bg-background"
          onClick={() => onSelectPrompt(prompt)}
        >
          {prompt}
        </Button>
      ))}
    </div>
  ), [onSelectPrompt]);
  
  // Optimize tab rendering with memoization
  const generalTabContent = useMemo(() => renderPromptButtons(generalPrompts), [renderPromptButtons, generalPrompts]);
  const creativeTabContent = useMemo(() => renderPromptButtons(creativePrompts), [renderPromptButtons, creativePrompts]);
  const professionalTabContent = useMemo(() => renderPromptButtons(professionalPrompts), [renderPromptButtons, professionalPrompts]);
  
  return (
    <Collapsible className="my-4 animate-fade-in rounded-md border border-border">
      <CollapsibleTrigger className="flex w-full items-center justify-between p-3 text-sm hover:bg-accent rounded-md">
        <div className="flex items-center gap-2">
          <LightbulbIcon size={16} className="text-primary" />
          <span className="font-medium">G·ª£i √Ω nhanh</span>
        </div>
        <div className="text-muted-foreground">
          <ChevronDownIcon className="h-4 w-4 collapsible-closed" />
          <ChevronUpIcon className="h-4 w-4 collapsible-open" />
        </div>
      </CollapsibleTrigger>
      
      <CollapsibleContent className="p-3 pt-0">
        <Tabs defaultValue="general" className="w-full">
          <TabsList className="grid grid-cols-3 mb-3 h-8">
            <TabsTrigger value="general" className="text-xs flex items-center gap-1">
              <MessagesSquareIcon size={12} />
              Chung
            </TabsTrigger>
            <TabsTrigger value="creative" className="text-xs flex items-center gap-1">
              <SparklesIcon size={12} />
              S√°ng t·∫°o
            </TabsTrigger>
            <TabsTrigger value="professional" className="text-xs flex items-center gap-1">
              <BookTextIcon size={12} />
              Chuy√™n nghi·ªáp
            </TabsTrigger>
          </TabsList>
          
          <TabsContent value="general" className="mt-0">
            {generalTabContent}
          </TabsContent>
          
          <TabsContent value="creative" className="mt-0">
            {creativeTabContent}
          </TabsContent>
          
          <TabsContent value="professional" className="mt-0">
            {professionalTabContent}
          </TabsContent>
        </Tabs>
        
        <div className="flex flex-wrap gap-2 mt-3">
          <Button
            variant="secondary"
            size="sm"
            className="text-xs w-full"
            onClick={() => onSelectPrompt("H√£y gi√∫p t√¥i vi·∫øt m·ªôt ƒëo·∫°n vƒÉn mi√™u t·∫£ c·∫£m x√∫c v·ªÅ m·ªôt k·ª∑ ni·ªám ƒë√°ng nh·ªõ trong cu·ªôc s·ªëng.")}
          >
            ‚ú® Vi·∫øt ƒëo·∫°n vƒÉn mi√™u t·∫£ c·∫£m x√∫c
          </Button>
          <Button
            variant="secondary"
            size="sm"
            className="text-xs w-full"
            onClick={() => onSelectPrompt("L√†m th·∫ø n√†o ƒë·ªÉ gi·∫£i quy·∫øt v·∫•n ƒë·ªÅ [m√¥ t·∫£ v·∫•n ƒë·ªÅ] m·ªôt c√°ch hi·ªáu qu·∫£?")}
          >
            üß© Gi·∫£i quy·∫øt v·∫•n ƒë·ªÅ
          </Button>
        </div>
      </CollapsibleContent>
    </Collapsible>
  );
});

QuickPrompts.displayName = 'QuickPrompts';

export default QuickPrompts;
